User Management API 


Server, along with API, and DB operations
that serves you something 


The database that we will be using is mongoDB and the database
aggregator would be mongodb atlas 



createAccount  -> data
login           -> data
route           -> data

in order to control what kind of data do we require and hence 
what kind of data is ALLOWED on our Server
hack, crash, conflict 

email -> Vishoo Verma
name -> vishooverma@gmail.com 


createAccount -> Name, email, password, phone number etc 
login -> email, password 



Data Validation -> mongoose -> data object modelling tool, validate Data
it is used to connect our server to our database





MVC Architecture -> Scalablity 
project structure architecture 
implement CODE ON DEMAND feature 
rendering lesser lines of code saves processing power of our server




Client 
                    API 
React!          <------> Server 
                         always 
                         live


Aggregation and Pipelines

querying data 

search -> filters 

User Data -> identify people in a city -> get their age distribution 
10000s              People in delhi             

Aggregation -> Collecting some information based on some conditions 

Pipelines-> stage1 -> stage2-> stage3-> stage4-> filter 












Project Description:

 User management api, using nodejs, express, mongodb, mongoose
 proper error handling 
 asynchronous enabled 
 mvc architecture -> model, view, controller
 implemented best security practices including password authenticated
 api security using jwt, to protect the routes
 password encryption to protect the user data
 


 security
 deployment 



 //  router.get("/avgAgebyGender", async (req, res)=>{
//     try{
//         const avgAge = await User.aggregate([
//             {
//                 $group:{
//                     _id:"$gender",
//                     averageAge: {$avg :"$age"}
//                 }
//             }
//         ])
//     }
//  })

    // //router.get("/aggregate", async(req, res)=>{
    //     try{
    //         const aggregation = await User.aggregate([
    //             {

    //                 $match:{
    //                     status : "Active"
                        //conditions for querying-> pincode, gender, age, status
    //                 }
    //                },{
    //                 $group:{
                    //gathering insights from the data -> basic calculations, grouping, filtering
    //                     _id: "$gender",  
    //                     totalUsers: {$sum: 1},
    //                     avgAge: {$avg: "$age"}
    //                 },
    
    //             },
    //             {
    //                 $sort:{
                    //sorting the data based on a particular field
                    // we should sort the data based on total number of users
                    // in descending order
                    //ascending order -> 1
                    //descending order -> -1

    //                     totalUsers: -1
    //                 },
// },
    //             {
    //                 $project:{
    //                     _id: 0,
    //                     aciveUsers: "$totalUsers",
    //                     averageAge: 1
    //                 },
    //             }
// }

    //         ])

    //     }    
    // })

    // male : 10000
    // female : 5000

    //     -> M, 10k
    //         F, 5k


 //users-> const sum= age1+age2+age3-> user count -> sum /user count -> avg age





API security

1. username and password 

2. 
Public -> available to everyone

Protected -> who have been authenticated 



token based authentication 

signup  -> token -> protected routes 
or login 



1) username & password
2) token based authentication 

    

authentication 

repetitive login signup 

login -> token 

token-> request  -> cookies 


session -> sessionID was stored on server 

token 


username/email -> payload -> hacked
header-> algorithm, type, encoding  -> hacked
signature/jwt secret -> verifying secret key -> prevents hacking 


hacker -> vishoo's account  
            vishoov 









chat gpt ->  $100-120 million dollars 
< 
deepSeek -> hedge fund trading  -> $6m 
1.5times 


aI 

data ------> algorithm 

data                label ----> algorithm 
rgb(255, 0, 0)= red
rgb(254, 0, 0)= red
rgb(253, 0, 0)= red 




                                    --------------------------
                                    |            >A            |
                                    | client            >B     | 
                                    |                          |
                                    |                >C        |
                                    ---------------------------